import sys
import requests

# Confluence configuration
USERNAME = "YOUR_USERNAME"
PASSWORD = "YOUR_PASSWORD"

# File configuration
ATTACHMENT_NAME = "file.html"

def upload_attachment(confluence_url, page_title, space_key, parent_page_title, html_file_path):
    auth = (USERNAME, PASSWORD)
    url = confluence_url + "/rest/api/content/" + PAGE_ID + "/child/attachment"
    headers = {"X-Atlassian-Token": "no-check"}
    files = {"file": (ATTACHMENT_NAME, open(html_file_path, "rb"))}

    response = requests.post(url, auth=auth, files=files, headers=headers)
    if response.status_code == 200:
        attachment_id = response.json()["results"][0]["id"]
        print("Attachment uploaded successfully!")
        return attachment_id
    else:
        print("Failed to upload attachment. Error:", response.text)
        return None

def create_or_update_page(confluence_url, page_title, space_key, parent_page_title, attachment_id):
    auth = (USERNAME, PASSWORD)
    url = confluence_url + "/rest/api/content"
    headers = {"Content-Type": "application/json"}

    # Check if the page already exists
    params = {
        "spaceKey": space_key,
        "title": page_title,
        "expand": "version",
    }
    response = requests.get(url, auth=auth, headers=headers, params=params)
    if response.status_code == 200:
        results = response.json()["results"]
        if results:
            page_id = results[0]["id"]
            version = results[0]["version"]["number"] + 1

            # Update existing page
            data = {
                "id": page_id,
                "type": "page",
                "title": page_title,
                "version": {"number": version},
                "body": {
                    "storage": {
                        "value": f"<ac:structured-macro ac:name=\"html\"><ac:plain-text-body><![CDATA[[{attachment_id}^{ATTACHMENT_NAME}]]]></ac:plain-text-body></ac:structured-macro>",
                        "representation": "storage"
                    }
                },
            }
            response = requests.put(url + "/" + page_id, auth=auth, json=data, headers=headers)
            if response.status_code == 200:
                print("Page updated successfully!")
            else:
                print("Failed to update page. Error:", response.text)
        else:
            # Create new page
            data = {
                "type": "page",
                "title": page_title,
                "ancestors": [{"type": "page", "title": parent_page_title}],
                "space": {"key": space_key},
                "body": {
                    "storage": {
                        "value": f"<ac:structured-macro ac:name=\"html\"><ac:plain-text-body><![CDATA[[{attachment_id}^{ATTACHMENT_NAME}]]]></ac:plain-text-body></ac:structured-macro>",
                        "representation": "storage"
                    }
                },
            }
            response = requests.post(url, auth=auth, json=data, headers=headers)
            if response.status_code == 200:
                print("Page created successfully!")
            else:
                print("Failed to create page. Error:", response.text)
    else:
        print("Failed to check page existence. Error:", response.text)

if __name__ == "__main__":
    if len(sys.argv) != 8:
        print
