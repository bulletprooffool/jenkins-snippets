@Library('my-library') _

import groovy.json.JsonSlurper

pipeline {
    agent any
    parameters {
        choice(
            choices: ['develop', 'uat', 'staging', 'prod'],
            description: 'Target environment',
            name: 'TARGETENV'
        )
        activeChoiceReactiveParam(
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Release version',
            filterLength: 1,
            name: 'VERSION',
            script: """
                def repoUrl = 'https://api.github.com/repos/<org>/<repo>/releases'
                def targetEnv = '${TARGETENV}'
                def preReleaseAllowed = targetEnv != 'prod'
                
                withEnv(['GITHUB_TOKEN=your_token_here']) {
                    try {
                        def response = httpRequest(
                            url: repoUrl,
                            contentType: 'APPLICATION_JSON',
                            httpMode: 'GET',
                            headers: [
                                Authorization: "Bearer ${env.GITHUB_TOKEN}"
                            ]
                        )
                        
                        def json = new JsonSlurper().parseText(response.getContent())
                        def versions = json.findAll {
                            it.prerelease == preReleaseAllowed && it.tag_name != null
                        }.collect {
                            it.tag_name
                        }
                        
                        return versions.sort { a, b -> -a.compareTo(b) }
                    } catch (Exception ex) {
                        return [ex.getMessage()]
                    }
                }
            """
        )
    }
    stages {
        stage('Validate parameters') {
            steps {
                script {
                    def targetEnv = params.TARGETENV
                    def version = params.VERSION
                    
                    if (!['develop', 'uat', 'staging', 'prod'].contains(targetEnv)) {
                        error "Invalid TARGETENV parameter: ${targetEnv}"
                    }
                    if (!version) {
                        error "Missing VERSION parameter"
                    }
                    if (version instanceof List && version.size() == 1 && version[0].startsWith('Error')) {
                        error version[0]
                    }
                }
            }
        }
        stage('Build and deploy') {
            when {
                expression { params.TARGETENV != 'develop' }
            }
            steps {
                // Build and deploy logic
            }
        }
    }
}
