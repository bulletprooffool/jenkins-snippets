import groovy.json.JsonOutput
import groovy.json.JsonSlurper

def confluenceUrl = "https://your-confluence-url"
def confluenceUsername = "your-username"
def confluencePassword = "your-password"
def spaceKey = "SPACEKEY"
def pageTitle = "Page Title"
def tableId = "tableId"

def environment = "Environment Name"
def version = "New Version"
def currentDate = new Date().format("yyyy-MM-dd")

// Get page content
def pageContent = getPageContent()
def updatedPageContent = updateTable(pageContent)

// Update page with new content
updatePageContent(updatedPageContent)

// Get page content from Confluence
def getPageContent() {
    def apiUrl = "${confluenceUrl}/rest/api/content?spaceKey=${spaceKey}&title=${URLEncoder.encode(pageTitle, "UTF-8")}"
    
    // Use 'withCredentials' to securely retrieve credentials from Jenkins credentials store
    def response = withCredentials([usernamePassword(credentialsId: 'confluence-credentials', passwordVariable: 'confluencePassword', usernameVariable: 'confluenceUsername')]) {
        sh "curl -s -u ${confluenceUsername}:${confluencePassword} ${apiUrl}"
    }
    
    def json = readJSON(text: response)

    return json.results[0].body.view.value
}

// Update the table with new version information
def updateTable(pageContent) {
    def tableStartTag = "<ac:structured-macro ac:name=\"table\">"
    def tableEndTag = "</ac:structured-macro>"

    def startIndex = pageContent.indexOf(tableStartTag) + tableStartTag.length()
    def endIndex = pageContent.indexOf(tableEndTag)

    def tableContent = pageContent.substring(startIndex, endIndex)
    def updatedTableContent = updateTableContent(tableContent)

    return pageContent.substring(0, startIndex) + updatedTableContent + pageContent.substring(endIndex)
}

// Update the content of the table with new version information
def updateTableContent(tableContent) {
    def tableJson = readJSON(text: tableContent)

    // Check if the environment already exists in the table
    def existingRow = tableJson.table.body.row.find { row ->
        row.cell[0].content == environment
    }

    if (existingRow) {
        // Update the existing row with new version information
        existingRow.cell[1].content = version
        existingRow.cell[2].content = currentDate

        // Append version history
        def versionHistory = "${version} - ${currentDate}"
        existingRow.cell[3].content += "\n${versionHistory}"
    } else {
        // Create a new row for the environment
        def newRow = [
            [
                "type": "td",
                "content": environment
            ],
            [
                "type": "td",
                "content": version
            ],
            [
                "type": "td",
                "content": currentDate
            ],
            [
                "type": "td",
                "content": ""
            ]
        ]

        tableJson.table.body.row.add(1, newRow)
    }

    return groovy.json.JsonOutput.toJson(tableJson)
}

// Update the page with the modified content
def updatePageContent(updatedContent) {
    def apiUrl = "${confluenceUrl}/rest/api/content/${tableId}"
    
    // Use 'withCredentials' to securely retrieve credentials from Jenkins credentials store
    withCredentials([usernamePassword(credentialsId: 'confluence-credentials', passwordVariable: 'confluencePassword', usernameVariable: 'confluenceUsername')]) {
        sh "curl -s -u ${confluenceUsername}:${confluencePassword} -X PUT -H 'Content-Type: application/json' --data '${updatedContent}' ${apiUrl}"
    }
}
