import groovy.json.JsonSlurper
import groovy.json.JsonOutput
import jenkins.model.Jenkins
import hudson.util.Secret

def confluenceUrl = "https://your-confluence-url"
def confluencePageId = "your-confluence-page-id"
def confluenceUsername = "your-confluence-username"
def confluencePassword = "your-confluence-password-credential-id"
def environment = "your-environment-name"
def currentVersion = "your-current-version"
def deploymentDate = "your-deployment-date"

def credentials = Jenkins.instance.getDescriptor('hudson.model.User').getCredentials()
def confluencePasswordCredential = credentials.find { it.id == confluencePassword }

if (!confluencePasswordCredential) {
    error "Confluence password credential not found!"
}

def password = Secret.toString(confluencePasswordCredential.password)

def getConfluencePageContent() {
    def url = "${confluenceUrl}/rest/api/content/${confluencePageId}?expand=body.storage"
    def response = httpRequest(url: url, authentication: "${confluenceUsername}:${password}")

    if (response.status != 200) {
        error "Failed to retrieve Confluence page content: ${response.status} ${response.statusLine}"
    }

    return new JsonSlurper().parseText(response.content).body.storage.value
}

def updateConfluencePageContent(content) {
    def url = "${confluenceUrl}/rest/api/content/${confluencePageId}"
    def requestBody = JsonOutput.toJson([
        version: [
            number: content.version.number + 1
        ],
        title: content.title,
        type: content.type,
        body: [
            storage: [
                value: content.body.storage.value,
                representation: content.body.storage.representation
            ]
        ]
    ])

    def response = httpRequest(
        url: url,
        authentication: "${confluenceUsername}:${password}",
        contentType: 'application/json',
        requestBody: requestBody,
        httpMode: 'PUT'
    )

    if (response.status != 200) {
        error "Failed to update Confluence page content: ${response.status} ${response.statusLine}"
    }
}

def findTable(content) {
    def startTag = "<table>"
    def endTag = "</table>"
    def startIndex = content.indexOf(startTag)
    def endIndex = content.indexOf(endTag, startIndex)
    if (startIndex != -1 && endIndex != -1) {
        return content.substring(startIndex, endIndex + endTag.length())
    } else {
        return null
    }
}

def addEnvironmentToTable(table, environment, currentVersion, deploymentDate) {
    def row = [
        cells: [
            [
                type: "th",
                value: environment
            ],
            [
                type: "td",
                value: currentVersion
            ],
            [
                type: "td",
                value: "${currentVersion} (${deploymentDate})"
            ]
        ]
    ]

    table.rows.add(row)
}

def updateEnvironmentInTable(table, environment, currentVersion, deploymentDate) {
    def row = table.rows.find { it.cells[0].value == environment }

    if (row) {
        row.cells[2].value = "${row.cells[2].value}, ${currentVersion} (${deploymentDate})"
    } else {
        addEnvironmentToTable(table, environment, currentVersion, deploymentDate)
    }
}

def createTableIfNotExists(content, environment, currentVersion, deploymentDate) {
    def table = findTable(content)

    if (table) {
        def jsonTable = new JsonSlurper().parseText(table)
        updateEnvironmentInTable(jsonTable, environment, currentVersion, deploymentDate)
    } else {
        table = [
            rows: []
        ]
        addEnvironmentToTable(table, environment, currentVersion, deploymentDate)
        content = content.replace("</body>", "<table>${JsonOutput.toJson(table)}</table></body>")
    }

    return content
}

def content = getConfluencePageContent()
content = createTableIfNotExists(content, environment, currentVersion, deploymentDate)
updateConfluencePageContent(content)
